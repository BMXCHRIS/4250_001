//initial course of actions :
user inputs a integer of choice 
creates array of integer length based on the places (1s,10s,100s,...etc.) it takes up
into for {
seperates the least significant digit from the input
parses the rest of the array to string
takes the single digit number ( the least sig digit) and adds it to the string 
//keeps following this logic until left with a single digit
add least sig digit to newly parsed string }
//loop executes array length -1
return a single digit


requirements: 
//solves the problem with recursion
1. takes in 2 numbers (float or integer) (positive or negative)
2. if the input was a float, be able to parse float into a string
	removes the decimal point and converts back to an integer
3. seperates the least sig digit from the number to add to remaning digits.
4. adds the two inputs together
5. use recursion logic to add the numbers
6. returns a single digit


design(uml):
+-----------------------------------+
|             Program               |
+-----------------------------------+
| - main(): void                    |
+-----------------------------------+
                |
                | uses
                v
+-----------------------------------+
|         NumberProcessor           |
+-----------------------------------+
| + add_and_reduce(num1: float,     | // calls the reduce_to_single_digit method
|                  num2: float): int|
| - reduce_to_single_digit(num: int)|
|                              : int|
+-----------------------------------+
                |
                | uses
                v
+-----------------------------------+
|           InputHandler            |
+-----------------------------------+
| + get_user_input(): tuple[float,  | //handles any inputs that arent a whole num (int)
|                           float]  |
+-----------------------------------+
                |
                | uses
                v
+-----------------------------------+
|           OutputHandler           |
+-----------------------------------+
| + display_result(result: int)     |
+-----------------------------------+

implementation:
def reduce_to_single_digit(num):
    # Base case: If the number is already a single digit, return it
    if num < 10:
        return num
    
    # Separate the least significant digit
    least_significant_digit = num % 10
    remaining_digits = num // 10
    
    # Add the least significant digit to the remaining digits
    new_num = remaining_digits + least_significant_digit
    
    # Recursively call the function with the new number
    return reduce_to_single_digit(new_num)

def add_and_reduce(num1, num2):
    # Add the two numbers
    total = num1 + num2
    
    # Handle floats: Convert to a string, remove the decimal point, and convert back to an integer
    total_str = str(total).replace(".", "")
    total_int = int(total_str)
    
    # Reduce the sum to a single digit
    return reduce_to_single_digit(total_int)

# Main function to execute the logic
def main():
    try:
        # User input (float or integer)
        num1 = float(input("Enter the first number (integer or float): "))
        num2 = float(input("Enter the second number (integer or float): "))
        
        # Add and reduce to a single digit using recursion
        result = add_and_reduce(num1, num2)
        
        print(f"The reduced single digit is: {result}")
    except ValueError:
        print("Invalid input. Please enter valid numbers.")

# Run the program
if __name__ == "__main__":
    main()
	
	
	//needs to account for if the user inputs a char string or anything outside the scope of a number/int/float/dec...etc.
