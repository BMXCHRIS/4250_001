Requirements

1. The program must use Recursion
2. The program must take user input
3. The program must make sure the user input is a number
4. The program must create 2 numbers from user input
5. The program must add the 2 given numbers together
6. The program must have a variable to hold the sum of the 2 given numbers
7. The program must have a variable to hold the least significant digit
8. The program must make sure the user input is not negative
9. The program must make sure the user input is not a decimal
10.The program must divide the sum by 10
11.The program must save the sum divided by 10 in a variable
12.The program must add the sum divided by 10 and the saved least significant digit
13.The program must use recursion until a single digit is all that remains

Assumptions-Only Positive Integers will be entered into this program
	   -There is no dummy rule in this program.
	   -Program does not need to return single digit from the recursive method. Program just has to print the result.
	   -Program ends after one time through.

Traceability Matrix
Requirement #		Design Labels
	1			4.f
	2			1.a/2.a
	3			1.b/2.b
	4			1.d/2.d
	5			3.1
	6			3.2
	7			4.b
	8			1.c/2.c
	9			1.b/2b
	10			4.b/4.c
	11			4.c
	12			4.e
	13			4.f

Design
https://lucid.app/lucidchart/ce2e1d51-8cee-43d6-aba3-613d82250557/edit?viewport_loc=-738%2C-202%2C2564%2C1244%2C0_0&invitationId=inv_2ab54e0e-c874-4bfc-9c15-d3ae54077022
-link to design

Code(For C#)
namespace Implementation
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //Establish two integer variables to hold user input.
            int num1 = 0;
            int num2 = 0;

            //Variable used to hold the user input while it is being validated
            string num = "";

            int sum = 0;

            //Two boolean values to make sure that the user input is positive and an integer
            bool goodInput1 = false;
            bool goodInput2 = false;

            //First while is used to validate first user input
            while(!goodInput1)
            {
                Console.WriteLine("Please enter a positive integer(1,2,...)");
                num = Console.ReadLine();

                if(int.TryParse(num, out num1))
                {
                    if(num1 > 0)
                    {
                        goodInput1 = true;
                    }
                    else
                    {
                        Console.WriteLine("Entered integer was not positive.");
                        Console.WriteLine();
                    }
                }
                else
                {
                    Console.WriteLine("Entered value was not a valid integer.");
                    Console.WriteLine();
                }
            }

            //Second while is used to validate the second user input
            while (!goodInput2)
            {
                Console.WriteLine("Please enter another positive integer(1,2,...)");
                num = Console.ReadLine();

                if (int.TryParse(num, out num2))
                {
                    if (num2 > 0)
                    {
                        goodInput2 = true;
                    }
                    else
                    {
                        Console.WriteLine("Entered integer was not positive.");
                        Console.WriteLine();
                    }
                }
                else
                {
                    Console.WriteLine("Entered value was not a valid integer.");
                    Console.WriteLine();
                }
            }
            //The sum of the two numbers
            sum = num1 + num2;
            Console.WriteLine(sum);

            //Creates a new instance of the program
            Program program = new Program();
            //Calls the recursive method and passes it the int sum
            program.TryRecursion(sum);
        }

        //Method takes the least significant digit of the passed number
        //and adds it to the rest of the significant digits. The method repeats
        //until only a single digit remains, then the result is printed.
        public void TryRecursion(int num)
        {
            //int most holds the most significant digits
            int most = num / 10;

            //double least holds the least significant digit
            double least = Convert.ToDouble(num) / 10;
            least = (least - most) * 10;

            int result = Convert.ToInt32(least) + most;

            if (result > 9)
            {
                TryRecursion(result);
            }
            else
            {
                //prints the remaining single digit to the console
                Console.WriteLine(result);
            }
        }
    }
}
